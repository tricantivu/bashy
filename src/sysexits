#!/usr/bin/env bash

usage() {

cat << USAGE
Usage: ${0##*/} [-h] [-l] [-i] ARGUMENT
Description: Lookup sysexits code names, values and descriptions

Options:
    -h
        Show usage information.

    -l
        List all exit codes names, values and descriptions

    -i
        Search strings case-insensitively

    -g
        Treat ARGUMENT as a glob pattern

Inspired by errno(1)
USAGE
}

err() {

    printf '%s: error: %s\n' "${0##*/}" "$*" >&2
}

readonly SYSEXITS_PATH='/usr/include/sysexits.h'

i=0

while getopts ':hlig' opt; do

    (( i++ ))

    case "${opt}" in
        (h)

            usage

            exit 0
        ;;
        (l)

            l_opt=true
        ;;
        (i)

            shopt -s nocasematch
        ;;
        (g)

            g_opt=true
        ;;
        ('?')

            err "invalid option '-${OPTARG}'"

            exit 1
        ;;
    esac

done

[[ -f "${SYSEXITS_PATH}" ]] || {

    err 'missing sysexits header file'

    exit 1
}

[[ -s "${SYSEXITS_PATH}" ]] || {

    err 'sysexits header file is empty'

    exit 1
}

codes=()

while read -r line; do

    [[ "${line}" =~ ^#define' 'EX_[A-Z]+ ]] && {

        # To correctly split the line into fields we must remove
        # one of the two tabs used to indent the macro definition.
        [[ "${BASH_REMATCH[*]#*' '}" == 'EX_OK' ]] && {

            line="${line/$'\t'/}"
        }

        mapfile -t -d $'\t' <<< "${line#'#define '}"

        MAPFILE[2]="${MAPFILE[2]#'/* '}"
        MAPFILE[2]="${MAPFILE[2]%' */'*}"

        MAPFILE[2]="${MAPFILE[2]// (*)/}"

        codes+=( "${MAPFILE[*]}" )
    }

done < "${SYSEXITS_PATH}"

(( $# )) || {

    err 'missing exit code to lookup'

    exit 1
}

${l_opt:=false} && {

    printf '%s\n' "${codes[@]}"

    exit 0
}

pattern="${@: -1}"

# Quote whitespace to prevent word splitting
[[ "${pattern}" =~ [[:blank:]] ]] && {

    quoted="${pattern//[[:blank:]]/' '}"
}

if ${g_opt:=false}; then

    for info in "${codes[@]}"; do

        # shellcheck disable=2053,2076
        [[ "${info}" == ${quoted:="${pattern}"} ]] && {

            echo "${info}"

            break
        }

    done

else
    for info in "${codes[@]}"; do

        # shellcheck disable=2076
        [[ "${info}" =~ ${quoted:="${pattern}"} ]] && {

            echo "${info}"

            break
        }

    done

fi
